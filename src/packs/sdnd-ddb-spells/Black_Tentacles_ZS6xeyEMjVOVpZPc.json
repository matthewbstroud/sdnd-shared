{
  "type": "spell",
  "system": {
    "description": {
      "value": "<div class=\"ddb\">\n<p>Squirming, ebony tentacles fill a 20-foot square on ground that you can see within range. For the duration, these tentacles turn the ground in the area into difficult terrain.</p>\n<p>When a creature enters the affected area for the first time on a turn or starts its turn there, the creature must succeed on a &amp;Reference[dex]{Dexterity} saving throw or take 3d6 &amp;Reference[bludgeoning]{bludgeoning} damage and be &amp;Reference[restrained]{restrained} by the tentacles until the spell ends. A creature that starts its turn in the area and is already &amp;Reference[restrained]{restrained} by the tentacles takes 3d6 &amp;Reference[bludgeoning]{bludgeoning} damage.</p>\n<p>A creature &amp;Reference[restrained]{restrained} by the tentacles can use its action to make a &amp;Reference[str]{Strength} or &amp;Reference[dex]{Dexterity} check (its choice) against your spell save DC. On a success, it frees itself.</p>\n</div>",
      "chat": ""
    },
    "source": {
      "book": "Playerâ€™s Handbook",
      "page": "",
      "license": "",
      "custom": ""
    },
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "1",
      "units": "minute"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": 20,
      "units": "ft",
      "type": "square",
      "width": null,
      "prompt": true
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": "",
      "prompt": true
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null,
      "scale": false
    },
    "ability": "",
    "actionType": "other",
    "attack": {
      "bonus": "",
      "flat": false
    },
    "chatFlavor": "[3d6 - bludgeoning] Any creature that enters the affected area for the first time on a turn, starts its turn there, or already restrained by the tentacles.",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "summons": null,
    "level": 4,
    "school": "con",
    "properties": [
      "vocal",
      "somatic",
      "material",
      "concentration"
    ],
    "materials": {
      "value": "a piece of tentacle from a giant octopus or a giant squid",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "name": "Black Tentacles",
  "flags": {
    "ddbimporter": {
      "id": 2383,
      "definitionId": 2014,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Black Tentacles",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": null,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ],
      "version": "5.1.27",
      "effect": {
        "applyStart": true,
        "handleStartRoll": true,
        "autoDamageIfCondition": true,
        "applyEnd": false,
        "applyEntry": true,
        "applyImmediate": false,
        "everyEntry": false,
        "conditionEffect": true,
        "damageEffect": true,
        "removeOnOff": true,
        "allowVsRemoveCondition": true,
        "removalCheck": [
          "str",
          "dex"
        ],
        "removalSave": null,
        "saveRemoves": false,
        "condition": "Restrained",
        "dice": "3d6[bludgeoning]",
        "damageType": "bludgeoning",
        "save": "dex",
        "sequencerFile": "jb2a.black_tentacles.dark_purple"
      },
      "effectsApplied": true
    },
    "midi-qol": {
      "removeAttackDamageButtons": "default",
      "onUseMacroName": "[preActiveEffects]ItemMacro",
      "forceCEOff": true
    },
    "midiProperties": {
      "confirmTargets": "default",
      "magicdam": true,
      "magiceffect": true
    },
    "dae": {
      "macro": {
        "name": "Black Tentacles",
        "type": "script",
        "scope": "global",
        "command": "if (!game.modules.get(\"ActiveAuras\")?.active) {\n  ui.notifications.error(\"ActiveAuras is not enabled\");\n  return;\n} else if (!game.modules.get(\"ddb-importer\")?.active) {\n  ui.notifications.error(\"ddb-importer is not enabled\");\n  return;\n}\n\nconst lastArg = args[args.length - 1];\n\nasync function attemptRemoval(targetToken, condition, item) {\n  if (game.dfreds.effectInterface.hasEffectApplied(condition, targetToken.document.uuid)) {\n    new Dialog({\n      title: `Use action to attempt to remove ${condition}?`,\n      buttons: {\n        one: {\n          label: \"Yes\",\n          callback: async () => {\n            const caster = item.parent;\n            const saveDc = caster.system.attributes.spelldc;\n            const removalCheck = foundry.utils.getProperty(item, \"system.flags.ddbimporter.effect.removalCheck\");\n            const removalSave = foundry.utils.getProperty(item, \"system.flags.ddbimporter.effect.removalSave\");\n            const ability = removalCheck\n              ? DDBImporter?.EffectHelper.getHighestAbility(targetToken.actor, removalCheck)\n              : DDBImporter?.EffectHelper.getHighestAbility(targetToken.actor, removalSave);\n            const type = removalCheck ? \"check\" : \"save\";\n            const flavor = `${condition} (via ${item.name}) : ${CONFIG.DND5E.abilities[ability].label} ${type} vs DC${saveDc}`;\n            const rollResult = removalCheck\n              ? (await targetToken.actor.rollAbilityTest(ability, { flavor })).total\n              : (await targetToken.actor.rollAbilitySave(ability, { flavor })).total;\n\n            if (rollResult >= saveDc) {\n              game.dfreds.effectInterface.removeEffect({ effectName: condition, uuid: targetToken.document.uuid });\n            } else {\n              if (rollResult < saveDc) ChatMessage.create({ content: `${targetToken.name} fails the ${type} for ${item.name}, still has the ${condition} condition.` });\n            }\n          },\n        },\n        two: {\n          label: \"No\",\n          callback: () => {},\n        },\n      },\n    }).render(true);\n  }\n}\n\nasync function applyCondition(condition, targetToken, item, itemLevel) {\n  if (!game.dfreds.effectInterface.hasEffectApplied(condition, targetToken.document.uuid)) {\n    const caster = item.parent;\n    const workflowItemData = foundry.utils.duplicate(item);\n    workflowItemData.system.target = { value: 1, units: \"\", type: \"creature\" };\n    workflowItemData.system.save.ability = item.flags.ddbimporter.effect.save;\n    workflowItemData.system.properties = DDBImporter?.EffectHelper.removeFromProperties(workflowItemData.system.properties, \"concentration\") ?? [];\n    workflowItemData.system.level = itemLevel;\n    workflowItemData.system.duration = { value: null, units: \"inst\" };\n    workflowItemData.system.target = { value: null, width: null, units: \"\", type: \"creature\" };\n    workflowItemData.system.uses = { value: null, max: \"\", per: null, recovery: \"\", autoDestroy: false };\n    workflowItemData.system.consume = { \"type\": \"\", \"target\": null, \"amount\": null };\n    workflowItemData.system.preparation.mode = \"atwill\";\n    foundry.utils.setProperty(workflowItemData, \"flags.itemacro\", {});\n    foundry.utils.setProperty(workflowItemData, \"flags.midi-qol\", {});\n    foundry.utils.setProperty(workflowItemData, \"flags.dae\", {});\n    foundry.utils.setProperty(workflowItemData, \"effects\", []);\n    delete workflowItemData._id;\n    workflowItemData.name = `${workflowItemData.name}: ${item.name} Condition save`;\n\n    const saveTargets = [...game.user?.targets].map((t )=> t.id);\n    game.user.updateTokenTargets([targetToken.id]);\n    const saveItem = new CONFIG.Item.documentClass(workflowItemData, { parent: caster });\n    const [config, options] = DDBImporter.EffectHelper.syntheticItemWorkflowOptions();\n    const result = await MidiQOL.completeItemUse(saveItem, config, options);\n\n    game.user.updateTokenTargets(saveTargets);\n    const failedSaves = [...result.failedSaves];\n    if (failedSaves.length > 0) {\n      await game.dfreds.effectInterface.addEffect({ effectName: condition, uuid: failedSaves[0].document.uuid });\n    }\n\n    return result;\n  }\n}\n\nasync function rollItemDamage(targetToken, itemUuid, itemLevel) {\n  const item = await fromUuid(itemUuid);\n  const caster = item.parent;\n  const isCantrip = item.flags.ddbimporter.effect.isCantrip;\n  const damageDice = item.flags.ddbimporter.effect.dice;\n  const damageType = item.flags.ddbimporter.effect.damageType;\n  const saveAbility = item.flags.ddbimporter.effect.save;\n  const casterToken = canvas.tokens.placeables.find((t) => t.actor?.uuid === caster.uuid);\n  const scalingDiceArray = item.system.scaling.formula.split(\"d\");\n  const scalingDiceNumber = item.system.scaling.mode === \"none\"\n    ? 0\n    : itemLevel - item.system.level;\n  const upscaledDamage =  isCantrip\n    ? `${DDBImporter?.EffectHelper.getCantripDice(caster)}d${scalingDiceArray[1]}[${damageType}]`\n    : scalingDiceNumber > 0 ? `${scalingDiceNumber}d${scalingDiceArray[1]}[${damageType}] + ${damageDice}` : damageDice;\n\n  console.warn(\"rollItemDamagae\", {\n    item,\n    caster,\n    isCantrip,\n    damageDice,\n    damageType,\n    saveAbility,\n    casterToken,\n    scalingDiceArray,\n    scalingDiceNumber,\n  })\n  const damageRoll = await new CONFIG.Dice.DamageRoll(upscaledDamage).evaluate({ async: true });\n  await MidiQOL.displayDSNForRoll(damageRoll, \"damageRoll\");\n  const workflowItemData = foundry.utils.duplicate(item);\n  workflowItemData.system.target = { value: 1, units: \"\", type: \"creature\" };\n  workflowItemData.system.save.ability = saveAbility;\n  workflowItemData.system.properties = DDBImporter?.EffectHelper.removeFromProperties(workflowItemData.system.properties, \"concentration\") ?? [];\n  workflowItemData.system.level = itemLevel;\n  workflowItemData.system.duration = { value: null, units: \"inst\" };\n  workflowItemData.system.uses = { value: null, max: \"\", per: null, recovery: \"\", autoDestroy: false };\n  workflowItemData.system.consume = { \"type\": \"\", \"target\": null, \"amount\": null };\n  workflowItemData.system.target = { value: null, width: null, units: \"\", type: \"creature\" };\n\n  foundry.utils.setProperty(workflowItemData, \"flags.itemacro\", {});\n  foundry.utils.setProperty(workflowItemData, \"flags.midi-qol\", {});\n  foundry.utils.setProperty(workflowItemData, \"flags.dae\", {});\n  foundry.utils.setProperty(workflowItemData, \"effects\", []);\n  delete workflowItemData._id;\n  workflowItemData.name = `${workflowItemData.name}: Turn Entry Damage`;\n\n  await new MidiQOL.DamageOnlyWorkflow(\n    caster,\n    casterToken,\n    damageRoll.total,\n    damageType,\n    [targetToken],\n    damageRoll,\n    {\n      flavor: `(${CONFIG.DND5E.damageTypes[damageType].label})`,\n      itemCardId: \"new\",\n      itemData: workflowItemData,\n      isCritical: false,\n    }\n  );\n}\n\nif (args[0].tag === \"OnUse\" && args[0].macroPass === \"preActiveEffects\") {\n  const safeName = lastArg.itemData.name.replace(/\\s|'|\\.|â€™/g, \"_\");\n  const dataTracker = {\n    randomId: foundry.utils.randomID(),\n    targetUuids: lastArg.targetUuids,\n    startRound: game.combat.round,\n    startTurn: game.combat.turn,\n    spellLevel: lastArg.spellLevel,\n  };\n\n  const item = await fromUuid(lastArg.itemUuid);\n  // await item.update(dataTracker);\n  await DAE.unsetFlag(item.actor, `${safeName}Tracker`);\n  await DAE.setFlag(item.actor, `${safeName}Tracker`, dataTracker);\n\n  const ddbEffectFlags = lastArg.item.flags.ddbimporter?.effect;\n  if (ddbEffectFlags) {\n    const sequencerFile = ddbEffectFlags.sequencerFile;\n    if (sequencerFile) {\n      const scale = ddbEffectFlags.sequencerScale ?? 1;\n      await DDBImporter?.EffectHelper.attachSequencerFileToTemplate(lastArg.templateUuid, sequencerFile, lastArg.itemUuid, scale);\n    }\n    if (ddbEffectFlags.isCantrip) {\n      const cantripDice = DDBImporter?.EffectHelper.getCantripDice(lastArg.actor);\n      args[0].spellLevel = cantripDice;\n      ddbEffectFlags.cantripDice = cantripDice;\n      let newEffects = args[0].item.effects.map((effect) => {\n        effect.changes = effect.changes.map((change) => {\n          change.value = change.value.replace(\"@cantripDice\", cantripDice)\n          return change;\n        });\n        return effect;\n      });\n      args[0].item.effects = foundry.utils.duplicate(newEffects);\n      args[0].itemData.effects = foundry.utils.duplicate(newEffects);\n    }\n    const template = await fromUuid(lastArg.templateUuid);\n    await template.update({\"flags.effect\": ddbEffectFlags});\n\n    if (ddbEffectFlags.applyImmediate) {\n      console.debug(\"Applying immediate effect\");\n      await DDBImporter?.EffectHelper.wait(500);\n      const condition = ddbEffectFlags.condition;\n      for (const token of lastArg.failedSaves) {\n        if (!game.dfreds.effectInterface.hasEffectApplied(condition, token.actor.uuid)) {\n          console.debug(`Applying ${condition} to ${token.name}`);\n          await game.dfreds.effectInterface.addEffect({ effectName: condition, uuid: token.actor.uuid });\n        }\n      };\n    }\n  }\n\n  console.debug(\"ItemMacro: Pre-apply finised, applying effect to template\")\n\n  return await game.modules.get(\"ActiveAuras\").api.AAHelpers.applyTemplate(args);\n\n} else if (args[0].tag === \"OnUse\" && args[0].macroPass === \"postActiveEffects\") {\n  if (lastArg.item.flags.ddbimporter?.effect?.applyImmediate) {\n    const condition = lastArg.item.flags.ddbimporter.effect.condition;\n    for (const token of lastArg.failedSaves) {\n      if (!game.dfreds.effectInterface.hasEffectApplied(condition, token.actor.uuid)) {\n        console.debug(`Applying ${condition} to ${token.name}`);\n        await game.dfreds.effectInterface.addEffect({ effectName: condition, uuid: token.actor.uuid });\n      }\n    };\n  }\n} else if (args[0] == \"on\" || args[0] == \"each\") {\n  const safeName = (lastArg.efData.name ?? lastArg.efData.label).replace(/\\s|'|\\.|â€™/g, \"_\");\n  const item = await fromUuid(lastArg.efData.origin);\n  const ddbEffectFlags = item.flags.ddbimporter.effect;\n  // sometimes the round info has not updated, so we pause a bit\n  if (args[0] == \"each\") await DDBImporter?.EffectHelper.wait(500);\n  const targetItemTracker = DAE.getFlag(item.parent, `${safeName}Tracker`);\n  const originalTarget = targetItemTracker.targetUuids.includes(lastArg.tokenUuid);\n  const target = canvas.tokens.get(lastArg.tokenId);\n  const targetTokenTrackerFlag = DAE.getFlag(target.actor, `${safeName}Tracker`);\n  const targetedThisCombat = targetTokenTrackerFlag && targetItemTracker.randomId === targetTokenTrackerFlag.randomId;\n  const targetTokenTracker = targetedThisCombat\n    ? targetTokenTrackerFlag\n    : {\n      randomId: targetItemTracker.randomId,\n      round: game.combat.round,\n      turn: game.combat.turn,\n      hasLeft: false,\n      condition: ddbEffectFlags.condition,\n    };\n\n  const castTurn = targetItemTracker.startRound === game.combat.round && targetItemTracker.startTurn === game.combat.turn;\n  const isLaterTurn = game.combat.round > targetTokenTracker.round || game.combat.turn > targetTokenTracker.turn;\n  const everyEntry = foundry.utils.hasProperty(item, \"flags.ddbimporter.effect.everyEntry\")\n    ? item.flags.ddbimporter.effect.everyEntry\n    : false;\n\n  // if:\n  // not cast turn, and not part of the original target\n  // AND one of the following\n  // not original template and have not yet had this effect applied this combat OR\n  // has been targeted this combat, left and re-entered effect, and is a later turn\n\n  const autoDamageIfCondition = foundry.utils.hasProperty(ddbEffectFlags, \"autoDamageIfCondition\") ? ddbEffectFlags.autoDamageIfCondition : false;\n  const hasConditionStart = game.dfreds.effectInterface.hasEffectApplied(targetTokenTracker.condition, target.actor.uuid);\n  const applyAutoConditionDamage = autoDamageIfCondition && hasConditionStart;\n\n  if (ddbEffectFlags.conditionEffect && !hasConditionStart) {\n    if (castTurn && originalTarget) {\n      console.debug(`Token ${target.name} is part of the original target for ${item.name}`);\n    } else if (everyEntry || !targetedThisCombat || (targetedThisCombat && isLaterTurn)) {\n      console.debug(`Token ${target.name} is targeted for immediate save vs condition with ${item.name}, using the following factors`, { originalTarget, castTurn, targetedThisCombat, targetTokenTracker, isLaterTurn });\n      targetTokenTracker.hasLeft = false;\n      await applyCondition(targetTokenTracker.condition, target, item, targetItemTracker.spellLevel);\n    } else {\n      console.debug(`Token ${target.name} has not evaluated for condition application`);\n    }\n  }\n  if (ddbEffectFlags.damageEffect) {\n    if (castTurn && originalTarget) {\n      console.debug(`Token ${target.name} is part of the original target for ${item.name}`);\n    } else if ((!targetedThisCombat && !autoDamageIfCondition) || //if auto damage applied by conditional save\n      (targetedThisCombat && ((targetTokenTracker.hasLeft && isLaterTurn) || (applyAutoConditionDamage && isLaterTurn)))\n    ) {\n      console.debug(`Token ${target.name} is targeted for immediate damage with ${item.name}, using the following factors`, { originalTarget, castTurn, targetedThisCombat, targetTokenTracker, isLaterTurn });\n      targetTokenTracker.hasLeft = false;\n      await rollItemDamage(target, lastArg.efData.origin, targetItemTracker.spellLevel);\n    } else {\n      console.debug(`Token ${target.name} has not evaluated for damage application`);\n    }\n  }\n\n  targetTokenTracker.turn = game.combat.turn;\n  targetTokenTracker.round = game.combat.round;\n  await DAE.setFlag(target.actor, `${safeName}Tracker`, targetTokenTracker);\n  const allowVsRemoveCondition = item.flags.ddbimporter.effect.allowVsRemoveCondition;\n  const hasConditionAppliedEnd = game.dfreds.effectInterface.hasEffectApplied(targetTokenTracker.condition, target.document.uuid);\n  const currentTokenCombatTurn = game.combat.current.tokenId === lastArg.tokenId;\n  if (currentTokenCombatTurn && allowVsRemoveCondition && hasConditionAppliedEnd) {\n    console.log(`Asking ${target.name} wants to remove ${targetTokenTracker.condition}`);\n    await attemptRemoval(target, targetTokenTracker.condition, item);\n  }\n} else if (args[0] == \"off\") {\n  const safeName = (lastArg.efData.name ?? lastArg.efData.label).replace(/\\s|'|\\.|â€™/g, \"_\");\n  const targetToken = await fromUuid(lastArg.tokenUuid);\n  const targetTokenTracker = await DAE.getFlag(targetToken.actor, `${safeName}Tracker`);\n  const removeOnOff = foundry.utils.hasProperty(lastArg, \"efData.flags.ddbimporter.effect.removeOnOff\")\n    ? lastArg.efData.flags.ddbimporter.effect.removeOnOff\n    : true;\n\n  if (targetTokenTracker?.condition && removeOnOff && game.dfreds.effectInterface.hasEffectApplied(targetTokenTracker.condition, lastArg.tokenUuid)) {\n    console.debug(`Removing ${targetTokenTracker.condition} from ${targetToken.name}`);\n    game.dfreds.effectInterface.removeEffect({ effectName: targetTokenTracker.condition, uuid: lastArg.tokenUuid });\n  }\n\n  if (targetTokenTracker) {\n    targetTokenTracker.hasLeft = true;\n    await DAE.setFlag(targetToken.actor, `${safeName}Tracker`, targetTokenTracker);\n  }\n}\n"
      }
    }
  },
  "effects": [
    {
      "icon": "icons/creatures/tentacles/tentacles-octopus-black-pink.webp",
      "changes": [
        {
          "key": "macro.itemMacro",
          "value": "",
          "mode": 0,
          "priority": 20
        }
      ],
      "duration": {
        "seconds": 60,
        "startTime": null,
        "rounds": 10,
        "turns": null,
        "startRound": null,
        "startTurn": null,
        "combat": null
      },
      "tint": null,
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "noneName",
          "macroRepeat": "startEveryTurn"
        },
        "ddbimporter": {
          "disabled": false,
          "effect": {
            "applyStart": true,
            "handleStartRoll": true,
            "autoDamageIfCondition": true,
            "applyEnd": false,
            "applyEntry": true,
            "applyImmediate": false,
            "everyEntry": false,
            "conditionEffect": true,
            "damageEffect": true,
            "removeOnOff": true,
            "allowVsRemoveCondition": true,
            "removalCheck": [
              "str",
              "dex"
            ],
            "removalSave": null,
            "saveRemoves": false,
            "condition": "Restrained",
            "dice": "3d6[bludgeoning]",
            "damageType": "bludgeoning",
            "save": "dex",
            "sequencerFile": "jb2a.black_tentacles.dark_purple"
          }
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "core": {},
        "ActiveAuras": {
          "isAura": true,
          "aura": "All",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "onlyOnce": false,
          "save": "str",
          "savedc": null,
          "displayTemp": true
        }
      },
      "name": "Black Tentacles",
      "statuses": [],
      "_id": "fxGaiOflTHztxBZi",
      "description": "",
      "origin": null,
      "_key": "!items.effects!ZS6xeyEMjVOVpZPc.fxGaiOflTHztxBZi"
    }
  ],
  "img": "icons/creatures/tentacles/tentacles-octopus-black-pink.webp",
  "folder": "e8UeRF8mmfaJRx4e",
  "ownership": {
    "default": 0,
    "6yhz13iFYYklKtgA": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.1.2",
    "coreVersion": "11.315",
    "createdTime": 1721274675451,
    "modifiedTime": 1721274675451,
    "lastModifiedBy": "6yhz13iFYYklKtgA"
  },
  "_id": "ZS6xeyEMjVOVpZPc",
  "sort": 0,
  "_key": "!items!ZS6xeyEMjVOVpZPc"
}
