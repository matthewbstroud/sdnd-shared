{
  "type": "spell",
  "system": {
    "description": {
      "value": "<div class=\"ddb\">\n<p>Your touch inflicts disease. Make a melee spell attack against a creature within your reach. On a hit, the target is &amp;Reference[poisoned]{poisoned}.</p>\n<p>At the end of each of the &amp;Reference[poisoned]{poisoned} target’s turns, the target must make a &amp;Reference[con]{Constitution} saving throw. If the target succeeds on three of these saves, it is no longer &amp;Reference[poisoned]{poisoned}, and the spell ends. If the target fails three of these saves, the target is no longer &amp;Reference[poisoned]{poisoned}, but choose one of the diseases below. The target is subjected to the chosen disease for the spell’s duration.</p>\n<p>Since this spell induces a natural disease in its target, any effect that removes a disease or otherwise ameliorates a disease’s effects apply to it.</p>\n<p><em><strong>Blinding Sickness.</strong></em> Pain grips the creature’s mind, and its eyes turn milky white. The creature has disadvantage on &amp;Reference[wis]{Wisdom} checks and &amp;Reference[wis]{Wisdom} saving throws and is &amp;Reference[blinded]{blinded}.</p>\n<p><em><strong>Filth Fever.</strong></em> A raging fever sweeps through the creature’s body. The creature has disadvantage on &amp;Reference[str]{Strength} checks, &amp;Reference[str]{Strength} saving throws, and attack rolls that use &amp;Reference[str]{Strength}.</p>\n<p><em><strong>Flesh Rot.</strong></em> The creature’s flesh decays. The creature has disadvantage on &amp;Reference[cha]{Charisma} checks and vulnerability to all damage.</p>\n<p><em><strong>Mindfire.</strong></em> The creature’s mind becomes feverish. The creature has disadvantage on &amp;Reference[int]{Intelligence} checks and &amp;Reference[int]{Intelligence} saving throws, and the creature behaves as if under the effects of the confusion spell during combat.</p>\n<p><em><strong>Seizure.</strong></em> The creature is overcome with shaking. The creature has disadvantage on &amp;Reference[dex]{Dexterity} checks, &amp;Reference[dex]{Dexterity} saving throws, and attack rolls that use &amp;Reference[dex]{Dexterity}.</p>\n<p><em><strong>Slimy Doom.</strong></em> The creature begins to bleed uncontrollably. The creature has disadvantage on &amp;Reference[con]{Constitution} checks and &amp;Reference[con]{Constitution} saving throws. In addition, whenever the creature takes damage, it is &amp;Reference[stunned]{stunned} until the end of its next turn.</p>\n</div>",
      "chat": ""
    },
    "source": {
      "book": "Player’s Handbook",
      "page": "227",
      "license": "",
      "custom": ""
    },
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "7",
      "units": "day"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": null,
      "units": "",
      "type": "",
      "width": null,
      "prompt": true
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": "",
      "prompt": true
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null,
      "scale": false
    },
    "ability": "",
    "actionType": "other",
    "attack": {
      "bonus": "",
      "flat": false
    },
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": null,
      "scaling": "spell"
    },
    "summons": null,
    "level": 5,
    "school": "nec",
    "properties": [
      "vocal",
      "somatic"
    ],
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "name": "Contagion",
  "flags": {
    "ddbimporter": {
      "id": 239497,
      "definitionId": 2046,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Contagion",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 227,
          "sourceType": 1
        }
      ],
      "tags": [
        "Debuff"
      ],
      "version": "5.1.27",
      "effectsApplied": true
    },
    "midi-qol": {
      "removeAttackDamageButtons": "default",
      "forceCEOff": true
    },
    "midiProperties": {
      "confirmTargets": "default",
      "magicdam": true,
      "magiceffect": true
    },
    "dae": {
      "macro": {
        "name": "Contagion",
        "type": "script",
        "scope": "global",
        "command": "const lastArg = args[args.length - 1];\nconst tokenOrActor = await fromUuid(lastArg.actorUuid);\nconst targetActor = tokenOrActor.actor ? tokenOrActor.actor : tokenOrActor;\n\nconst DAEItem = lastArg.efData.flags.dae.itemData;\n\n/**\n * Generates the GM client dialog for selecting final Effect, updates target effect with name, icon and new DAE effects.\n */\nasync function applyContagion() {\n  if (DDBImporter.EffectHelper.isConditionEffectAppliedAndActive(\"Poisoned\", targetActor))\n    game.dfreds.effectInterface.removeEffect({ effectName: \"Poisoned\", uuid: targetActor.uuid });\n\n  new Dialog({\n    title: \"Contagion options\",\n    content: \"<p>Select the effect</p>\",\n    buttons: {\n      one: {\n        blinding: \"Blinding Sickness\",\n        callback: async () => {\n          let data = {\n            changes: [\n              {\n                key: \"flags.midi-qol.disadvantage.ability.check.wis\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.save.wis\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n            ],\n            icon: \"modules/dfreds-convenient-effects/images/blinded.svg\",\n            label: \"Blinding Sickness\",\n            name: \"Blinding Sickness\",\n            _id: lastArg.effectId,\n          };\n          targetActor.updateEmbeddedDocuments(\"ActiveEffect\", [data]);\n        },\n      },\n      filth: {\n        label: \"Filth Fever\",\n        callback: async () => {\n          let data = {\n            changes: [\n              {\n                key: \"flags.midi-qol.disadvantage.attack.mwak\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.attack.rwak\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.check.str\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.save.str\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n            ],\n            label: \"Filth Fever\",\n            name: \"Filth Fever\",\n            _id: lastArg.effectId,\n          };\n          targetActor.updateEmbeddedDocuments(\"ActiveEffect\", [data]);\n        },\n      },\n      flesh: {\n        label: \"Flesh Rot\",\n        callback: async () => {\n          let data = {\n            changes: [\n              {\n                key: \"flags.midi-qol.disadvantage.ability.check.cha\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"system.traits.dv.all\",\n                mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n                priority: 20,\n                value: \"1\",\n              },\n            ],\n            icon: \"icons/skills/wounds/injury-hand-blood-red.webp\",\n            label: \"Flesh Rot\",\n            name: \"Flesh Rot\",\n            _id: lastArg.effectId,\n          };\n          targetActor.updateEmbeddedDocuments(\"ActiveEffect\", [data]);\n        },\n      },\n      mindfire: {\n        label: \"Mindfire\",\n        callback: async () => {\n          let data = {\n            changes: [\n              {\n                key: \"flags.midi-qol.disadvantage.ability.check.int\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.save.int\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n            ],\n            icon: \"icons/svg/daze.svg\",\n            label: \"Mindfire\",\n            name: \"Mindfire\",\n            _id: lastArg.effectId,\n          };\n          targetActor.updateEmbeddedDocuments(\"ActiveEffect\", [data]);\n        },\n      },\n      seizure: {\n        label: \"Seizure\",\n        callback: async () => {\n          let data = {\n            changes: [\n              {\n                key: \"flags.midi-qol.disadvantage.attack.mwak\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.attack.rwak\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.check.dex\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.save.dex\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n            ],\n            icon: \"icons/svg/paralysis.svg\",\n            label: \"Seizure\",\n            name: \"Seizure\",\n            _id: lastArg.effectId,\n          };\n          targetActor.updateEmbeddedDocuments(\"ActiveEffect\", [data]);\n        },\n      },\n      slimy: {\n        label: \"Slimy Doom\",\n        callback: async () => {\n          let data = {\n            changes: [\n              {\n                key: \"flags.midi-qol.disadvantage.ability.check.con\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n              {\n                key: \"flags.midi-qol.disadvantage.ability.save.con\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 20,\n                value: \"1\",\n              },\n            ],\n            icon: \"icons/magic/unholy/projectile-helix-blood-red.webp\",\n            label: \"Slimy Doom\",\n            name: \"Slimy Doom\",\n            _id: lastArg.effecId,\n          };\n          targetActor.updateEmbeddedDocuments(\"ActiveEffect\", [data]);\n        },\n      },\n    },\n  }).render(true);\n}\n\n/**\n * Execute contagion effects, update flag counts or remove effect\n *\n * @param {Actor5e} combatant Current combatant to test against\n * @param {Number} save Target DC for save\n */\nasync function contagionSave() {\n  const flag = DAE.getFlag(targetActor, \"ContagionSpell\");\n  const flavor = `${CONFIG.DND5E.abilities[\"con\"].label} DC${flag.saveDC} ${DAEItem?.name || \"\"}`;\n  const saveRoll = await targetActor.rollAbilitySave(\"con\", { flavor });\n\n  if (saveRoll.total < flag.saveDC) {\n    if (flag.count === 2) {\n      ChatMessage.create({ content: `Contagion on ${targetActor.name} is complete` });\n      applyContagion();\n    } else {\n      const contagionCount = flag.count + 1;\n      DAE.setFlag(targetActor, \"ContagionSpell\", { count: contagionCount });\n      console.log(`Contagion increased to ${contagionCount}`);\n    }\n  } else if (saveRoll.total >= flag.saveDC) {\n    targetActor.deleteEmbeddedDocuments(\"ActiveEffect\", [lastArg.effectId]);\n  }\n}\n\nif (args[0] === \"on\") {\n  const saveData = DAEItem.system.save;\n  if (saveData.scaling === \"spell\") {\n    const rollData = actor.getRollData();\n    saveData.dc = rollData.attributes.spelldc;\n  }\n  // Save the hook data for later access.\n  DAE.setFlag(targetActor, \"ContagionSpell\", { count: 0, saveDC: saveData.dc });\n}\n\nif (args[0] === \"off\") {\n  // When off, clean up hooks and flags.\n  DAE.unsetFlag(targetActor, \"ContagionSpell\");\n}\n\nif (args[0] === \"each\") {\n  let contagion = lastArg.efData;\n  if ((contagion.name ?? contagion.label) === \"Contagion\") contagionSave();\n}\n"
      }
    }
  },
  "effects": [
    {
      "icon": "icons/magic/acid/pouring-gas-smoke-liquid.webp",
      "changes": [
        {
          "key": "macro.CE",
          "mode": 0,
          "value": "Poisoned",
          "priority": 20
        },
        {
          "key": "macro.itemMacro",
          "value": "",
          "mode": 0,
          "priority": 20
        }
      ],
      "duration": {
        "seconds": null,
        "startTime": null,
        "rounds": null,
        "turns": null,
        "startRound": null,
        "startTurn": null,
        "combat": null
      },
      "tint": null,
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "noneName",
          "macroRepeat": "endEveryTurn"
        },
        "ddbimporter": {
          "disabled": false
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "core": {}
      },
      "name": "Contagion",
      "statuses": [],
      "_id": "imDPmIA7eso2M5Sd",
      "description": "",
      "origin": null,
      "_key": "!items.effects!SI2arqqPhDrDfz6M.imDPmIA7eso2M5Sd"
    }
  ],
  "img": "icons/magic/acid/pouring-gas-smoke-liquid.webp",
  "folder": "ocH9XKjvhtI6hJk6",
  "ownership": {
    "default": 0,
    "6yhz13iFYYklKtgA": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.1.2",
    "coreVersion": "11.315",
    "createdTime": 1721274673271,
    "modifiedTime": 1721274673271,
    "lastModifiedBy": "6yhz13iFYYklKtgA"
  },
  "_id": "SI2arqqPhDrDfz6M",
  "sort": 0,
  "_key": "!items!SI2arqqPhDrDfz6M"
}
