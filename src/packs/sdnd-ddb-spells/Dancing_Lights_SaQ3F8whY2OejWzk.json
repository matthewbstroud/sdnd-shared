{
  "type": "spell",
  "system": {
    "description": {
      "value": "<div class=\"ddb\">\n<p>You create up to four torch-sized lights within range, making them appear as torches, lanterns, or glowing orbs that hover in the air for the duration. You can also combine the four lights into one glowing vaguely &amp;Reference[humanoid]{humanoid} form of Medium size. Whichever form you choose, each light sheds dim light in a 10-foot radius.</p>\n<p>As a bonus action on your turn, you can move the lights up to 60 feet to a new spot within range. A light must be within 20 feet of another light created by this spell, and a light winks out if it exceeds the spell's range.</p>\n</div>",
      "chat": ""
    },
    "source": {
      "book": "Playerâ€™s Handbook",
      "page": "230",
      "license": "",
      "custom": ""
    },
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "1",
      "units": "minute"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": null,
      "units": "",
      "type": "",
      "width": null,
      "prompt": true
    },
    "range": {
      "value": 120,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": "",
      "prompt": true
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null,
      "scale": false
    },
    "ability": "",
    "actionType": "other",
    "attack": {
      "bonus": "",
      "flat": false
    },
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "summons": null,
    "level": 0,
    "school": "evo",
    "properties": [
      "vocal",
      "somatic",
      "material",
      "concentration"
    ],
    "materials": {
      "value": "a bit of phosphorus or wychwood, or a glowworm",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "name": "Dancing Lights",
  "flags": {
    "ddbimporter": {
      "id": 136489,
      "definitionId": 2057,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Dancing Lights",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 230,
          "sourceType": 1
        }
      ],
      "tags": [
        "Utility"
      ],
      "version": "5.1.27",
      "effectsApplied": true
    },
    "midi-qol": {
      "removeAttackDamageButtons": "default",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "forceCEOff": true
    },
    "midiProperties": {
      "confirmTargets": "default",
      "magicdam": true,
      "magiceffect": true
    },
    "dae": {
      "macro": {
        "name": "Dancing Lights",
        "type": "script",
        "scope": "global",
        "command": "if (!DDBImporter?.EffectHelper.checkJB2a(true, true, true)) return false;\n\nconst summonType = 'Dancing light';\nconst caster = game.actors.get(args[0].actor._id);\nconst spawnedIds = [];\n\n// this is called when the item is created, you can run this manually if your actors are not created yet\n// await DDBImporter.EffectHelper._createJB2aActors(\"Dancing Lights\", \"Dancing light\");\n\nconst lightActors = game.actors.filter((f) =>f.name.includes(summonType));\n\nconst actorChoices = lightActors.map((actor) => {\n  const labelSrc = actor.img.replace(/\\\\d+x\\\\d+\\\\.webm$/, 'Thumb.webp');\n  const labelText = actor.name.split(' - ')[1];\n  return {\n    label: `<img src=\"${labelSrc}\" width=\"40\" height=\"40\" style=\"border:0px\"><br>${labelText}`,\n    value: actor,\n  };\n});\n\nasync function preEffects(template, update) {\n  //prep summoning area\n  new Sequence()\n    .effect()\n    .atLocation(template)\n    .file(getJB2aName(update.token.name))\n    .center()\n    .scale(1.5)\n    .belowTokens()\n    .play();\n}\n\nasync function postEffects(template, token) {\n  //bring in our minion\n  new Sequence().animation().on(token).fadeIn(2000).play();\n}\n\nfunction getJB2aName(colorChoice) {\n  if (game.modules.get('jb2a_patreon')?.active) {\n    if (colorChoice.includes('Blue')) {\n      return 'jb2a.markers.light.intro.blue';\n    } else if (colorChoice.includes('Green')) {\n      return 'jb2a.markers.light.intro.green';\n    } else if (colorChoice.includes('Yellow')) {\n      return 'jb2a.markers.light.intro.yellow02';\n    } else {\n      return 'jb2a.markers.light.intro.yellow';\n    }\n  } else {\n    return 'jb2a.markers.light.intro.blue';\n  }\n}\n\nfor (let i = 0; i < 4; i++) {\n  const choice = await warpgate.buttonDialog({\n    title: 'Choose your color:',\n    buttons: actorChoices,\n  });\n\n  if (!choice) break;\n\n  const updates = {\n    token: {\n      name: `${choice.name} of ${caster.name}`,\n      alpha: 0,\n    },\n    actor: {\n      name: `${choice.name} of ${caster.name}`,\n      system: {\n        attributes: {\n          hp: {\n            value: 100,\n            max: 100,\n          },\n        },\n        details: {\n          type: {\n            custom: 'NoTarget',\n            value: 'custom',\n          },\n        },\n      },\n    },\n    flags: {\n      'mid-qol': {\n        neverTarget: true,\n      }\n    }\n  };\n\n  const callbacks = {\n    pre: async (template, update) => {\n      preEffects(template, update);\n      await DDBImporter?.EffectHelper.wait(500);\n    },\n    post: async (template, token, updates) => {\n      postEffects(template, token);\n      await DDBImporter?.EffectHelper.wait(500);\n      const sourceActorOrToken = fromUuidSync(\n        updates.actor.flags.warpgate.control.actor\n      );\n      const sourceActor = sourceActorOrToken.actor ?? sourceActorOrToken;\n      const concentrationFlag = sourceActor.getFlag('midi-qol', 'concentration-data');\n      concentrationFlag.removeUuids.push(token.uuid);\n      await sourceActor.setFlag('midi-qol', 'concentration-data', concentrationFlag);\n    },\n  };\n\n  const options = { controllingActor: caster };\n  const ids = await warpgate.spawn(\n    await choice.getTokenDocument(),\n    updates,\n    callbacks,\n    options,\n  );\n\n  if (!ids) break;\n  spawnedIds.push(ids[0]);\n}\n\nawait token.actor.setFlag('midi-qol', 'spawnedTokenIds', spawnedIds);\nfor (const id of spawnedIds) {\n  const spawnedActor = canvas.scene.tokens.get(id).actor;\n  await DAE.setFlag(spawnedActor, 'spawnedByTokenUuid', token.document.uuid);\n}\n\nconst hookIdForSpawnedCreatures = Hooks.on('preDeleteToken', async (tokenDoc) => {\n  const sourceTokenUuid = tokenDoc.actor.getFlag('dae', 'spawnedByTokenUuid');\n  if (!sourceTokenUuid) return;\n  new Sequence()\n    .effect()\n    .atLocation(tokenDoc.object.center)\n    .file(`jb2a.smoke.puff.centered.grey.2`)\n    .scale(tokenDoc.width / canvas.scene.grid.distance)\n    .play();\n  const sourceActor = fromUuidSync(sourceTokenUuid).actor;\n  const spawnedIds = sourceActor.getFlag('midi-qol', 'spawnedTokenIds');\n  if (!spawnedIds) return;\n  const spawnedTokenDocs = [];\n  for (const i of spawnedIds) {\n    if (canvas.scene.tokens.get(i))\n      spawnedTokenDocs.push(canvas.scene.tokens.get(i));\n  }\n  if (spawnedTokenDocs.length === 1) {\n    await sourceActor.unsetFlag('midi-qol', 'spawnedTokenIds');\n    Hooks.off('preDeleteToken', hookIdForSpawnedCreatures);\n  }\n});\n"
      }
    }
  },
  "effects": [],
  "img": "icons/magic/light/explosion-star-glow-yellow.webp",
  "folder": "rkqMMY58A8Xdl9Mg",
  "ownership": {
    "default": 0,
    "6yhz13iFYYklKtgA": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.3.1",
    "coreVersion": "12.331",
    "createdTime": 1721274675268,
    "modifiedTime": 1730039103877,
    "lastModifiedBy": "6yhz13iFYYklKtgA",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "_id": "SaQ3F8whY2OejWzk",
  "sort": 0,
  "_key": "!items!SaQ3F8whY2OejWzk"
}
