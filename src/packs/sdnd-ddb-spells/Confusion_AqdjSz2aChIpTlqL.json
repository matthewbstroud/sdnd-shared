{
  "type": "spell",
  "system": {
    "description": {
      "value": "<div class=\"ddb\">\n<p>This spell assaults and twists creatures' minds, spawning delusions and provoking uncontrolled action. Each creature in a 10-foot-radius &amp;Reference[sphere]{sphere} centered on a point you choose within range must succeed on a &amp;Reference[wis]{Wisdom} saving throw when you cast this spell or be affected by it.</p>\n<p>An affected target can't take reactions and must roll a d10 at the start of each of its turns to determine its behavior for that turn.</p>\n<table>\n<thead>\n<tr>\n<th>d10</th>\n<th>Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>The creature uses all its movement to move in a random direction. To determine the direction, roll a d8 and assign a direction to each die face. The creature doesn't take an action this turn.</td>\n</tr>\n<tr>\n<td>2-6</td>\n<td>The creature doesn't move or take actions this turn.</td>\n</tr>\n<tr>\n<td>7-8</td>\n<td>The creature uses its action to make a melee attack against a randomly determined creature within its reach. If there is no creature within its reach, the creature does nothing this turn.</td>\n</tr>\n<tr>\n<td>9-10</td>\n<td>The creature can act and move normally.</td>\n</tr>\n</tbody>\n</table><div id=\"table-link\">@UUID[Compendium.world.ddb-lost-mines-phandelver-tables.RollTable.kYKdNvAUgqNvA9Iz]{Open RollTable Confusion: Behavior}</div>\n<p> </p>\n<p>At the end of each of its turns, an affected target can make a &amp;Reference[wis]{Wisdom} saving throw. If it succeeds, this effect ends for that target.</p>\n<p><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 5th level or higher, the radius of the &amp;Reference[sphere]{sphere} increases by 5 feet for each slot level above 4th.</p>\n</div>",
      "chat": ""
    },
    "source": {
      "book": "Player’s Handbook",
      "page": "224",
      "license": "",
      "custom": ""
    },
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "1",
      "units": "minute"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": 10,
      "units": "ft",
      "type": "sphere",
      "width": null,
      "prompt": true
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": "",
      "prompt": true
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null,
      "scale": false
    },
    "ability": "",
    "actionType": "save",
    "attack": {
      "bonus": "",
      "flat": false
    },
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "summons": null,
    "level": 4,
    "school": "enc",
    "properties": [
      "vocal",
      "somatic",
      "material",
      "concentration"
    ],
    "materials": {
      "value": "three nut shells",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "name": "Confusion",
  "flags": {
    "ddbimporter": {
      "id": 136256,
      "definitionId": 2038,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Confusion",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 224,
          "sourceType": 1
        }
      ],
      "tags": [
        "Control"
      ],
      "version": "5.1.27",
      "effectsApplied": true
    },
    "midi-qol": {
      "removeAttackDamageButtons": "default",
      "forceCEOff": true
    },
    "midiProperties": {
      "confirmTargets": "default",
      "magicdam": true,
      "magiceffect": true
    },
    "dae": {
      "macro": {
        "name": "Confusion",
        "type": "script",
        "scope": "global",
        "command": "if (args[0] === \"each\") {\n  const findEffect = token.actor.effects.find((effect) => effect.name === \"Confusion\");\n\n  if (findEffect) {\n    const changeIndex = findEffect.changes.findIndex(\n      (change) =>\n        change.key === \"system.attributes.movement.all\" &&\n        change.mode === CONST.ACTIVE_EFFECT_MODES.CUSTOM &&\n        change.value === 0\n    );\n\n    if (changeIndex !== -1) {\n      findEffect.changes.splice(changeIndex, 1);\n\n      await MidiQOL.socket().executeAsGM(\"updateEffects\", {\n        actorUuid: token.actor.uuid,\n        updates: [{ _id: findEffect.id, changes: findEffect.changes }],\n      });\n    } else {\n      console.log(\"Specified change not found in the Confusion effect.\");\n    }\n  } else {\n    console.log(\"Confusion effect not found on the actor.\");\n  }\n\n  const hasEffectApplied = await game.dfreds.effectInterface.hasEffectApplied(\"Reaction\", token.actor.uuid);\n  if (!hasEffectApplied) {\n    game.dfreds.effectInterface.addEffect({ effectName: \"Reaction\", uuid: token.actor.uuid });\n  }\n\n  const confusionRoll = await new CONFIG.Dice.DamageRoll(\"1d10\").evaluate({ async: true });\n  await MidiQOL.displayDSNForRoll(confusionRoll, \"damageRoll\");\n  const result = confusionRoll.total;\n  let content;\n  let selectedTokenMessage;\n  let directionResult;\n  let directionContent;\n  switch (result) {\n    case 1: {\n      content = \"The creature uses all its movement to move in a random direction. To determine the direction, roll a d8 and assign a direction to each die face. The creature doesn't take an action this turn.\";\n      const directionRoll = await new CONFIG.Dice.DamageRoll(\"1d8\").evaluate({ async: true });\n      await MidiQOL.displayDSNForRoll(directionRoll, \"damageRoll\");\n      directionResult = directionRoll.total;\n      directionContent = null;\n      switch (directionResult) {\n        case 1:\n          directionContent = \"North\";\n          break;\n        case 2:\n          directionContent = \"South\";\n          break;\n        case 3:\n          directionContent = \"East\";\n          break;\n        case 4:\n          directionContent = \"West\";\n          break;\n        case 5:\n          directionContent = \"Northwest\";\n          break;\n        case 6:\n          directionContent = \"Northeast\";\n          break;\n        case 7:\n          directionContent = \"Southwest\";\n          break;\n        case 8:\n          directionContent = \"Southeast\";\n          break;\n      }\n      break;\n    }\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6: {\n      content = \"The creature doesn't move or take actions this turn.\";\n      const findEffect = token.actor.effects.find((effect) => effect.name === \"Confusion\");\n      if (findEffect)\n        findEffect.changes.push({\n          key: \"system.attributes.movement.all\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: 0,\n          priority: 20,\n        });\n      await MidiQOL.socket().executeAsGM(\"updateEffects\", {\n        actorUuid: token.actor.uuid,\n        updates: [{ _id: findEffect.id, changes: findEffect.changes }],\n      });\n      break;\n    }\n    case 7:\n    case 8: {\n      content = \"The creature uses its action to make a melee attack against a randomly determined creature within its reach. If there is no creature within its reach, the creature does nothing this turn.\";\n      const rangeCheck = MidiQOL.findNearby(null, token.actor, token.actor.system.attributes.movement.walk, {\n        includeToken: false,\n      });\n      if (rangeCheck.length > 0) {\n        const randomSelection = rangeCheck[Math.floor(Math.random() * rangeCheck.length)];\n        selectedTokenMessage = `The creature must move to ${randomSelection.actor.name} and attack them with a melee attack.`;\n        if (game.modules.get(\"sequencer\")?.active) {\n          const target = randomSelection;\n          new Sequence()\n            .effect()\n            .from(target)\n            .belowTokens()\n            .attachTo(target, { locale: true })\n            .scaleToObject(1, { considerTokenScale: true })\n            .spriteRotation(target.rotation * -1)\n            .filter(\"Glow\", { color: 0x911a1a, distance: 15 })\n            .duration(30000)\n            .fadeIn(2000, { delay: 1000 })\n            .fadeOut(3500, { ease: \"easeInSine\" })\n            .opacity(0.8)\n            .zIndex(0.1)\n            .loopProperty(\"alphaFilter\", \"alpha\", { values: [0.5, 0], duration: 1000, pingPong: true, delay: 500 })\n            .effect()\n            .file(\"jb2a.extras.tmfx.outflow.circle.01\")\n            .attachTo(target, { locale: true })\n            .scaleToObject(3, { considerTokenScale: false })\n            .randomRotation()\n            .duration(30000)\n            .fadeIn(5000, { delay: 1000 })\n            .fadeOut(3500, { ease: \"easeInSine\" })\n            .scaleIn(0, 3500, { ease: \"easeInOutCubic\" })\n            .tint(0x870101)\n            .opacity(0.5)\n            .belowTokens()\n            .play();\n        }\n      } else {\n        selectedTokenMessage = `The creature does nothing this turn.`;\n      }\n      break;\n    }\n    case 9:\n    case 10:\n      content = \"The creature can act and move normally.\";\n      break;\n  }\n  ChatMessage.create({ content: `Confusion roll for ${token.actor.name} is ${result}:<br> ` + content });\n  if (result === 1)\n    ChatMessage.create({\n      content: `Movement roll for ${token.actor.name} is ${directionResult}: ${token.actor.name} must move ${directionContent} using all (${token.actor.system.attributes.movement.walk} feet) of their movement.`,\n    });\n  if (result === 7 || result === 8) ChatMessage.create({ content: selectedTokenMessage });\n}\n\nif (args[0] === \"off\") {\n  const findEffect = token.actor.effects.find((effect) => effect.name === \"Confusion\");\n\n  if (findEffect) {\n    const changeIndex = findEffect.changes.findIndex(\n      (change) =>\n        change.key === \"system.attributes.movement.all\" &&\n        change.mode === CONST.ACTIVE_EFFECT_MODES.CUSTOM &&\n        change.value === 0\n    );\n\n    if (changeIndex !== -1) {\n      findEffect.changes.splice(changeIndex, 1);\n\n      await MidiQOL.socket().executeAsGM(\"updateEffects\", {\n        actorUuid: token.actor.uuid,\n        updates: [{ _id: findEffect.id, changes: findEffect.changes }],\n      });\n    } else {\n      console.log(\"Specified change not found in the Confusion effect.\");\n    }\n  } else {\n    console.log(\"Confusion effect not found on the actor.\");\n  }\n}\n"
      }
    }
  },
  "effects": [
    {
      "changes": [
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 5,
          "value": "label=Confusion (End of Turn),turn=end,saveAbility=wis,saveDC=@attributes.spelldc,saveMagic=true,killAnim=true",
          "priority": 20
        },
        {
          "key": "macro.itemMacro",
          "value": "",
          "mode": 0,
          "priority": 20
        }
      ],
      "duration": {
        "seconds": null,
        "startTime": null,
        "rounds": 10,
        "turns": null,
        "startRound": null,
        "startTurn": null,
        "combat": null
      },
      "tint": "#ffffff",
      "transfer": false,
      "disabled": false,
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "noneName",
          "macroRepeat": "startEveryTurn"
        },
        "ddbimporter": {
          "disabled": false
        },
        "midi-qol": {
          "forceCEOff": true
        },
        "core": {}
      },
      "name": "Confusion",
      "statuses": [],
      "_id": "zwoSXsak3zGDDOwW",
      "description": "",
      "origin": null,
      "_stats": {
        "coreVersion": "12.331",
        "systemId": null,
        "systemVersion": null,
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null,
        "compendiumSource": null,
        "duplicateSource": null
      },
      "img": "icons/magic/air/air-burst-spiral-teal-green.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!AqdjSz2aChIpTlqL.zwoSXsak3zGDDOwW"
    }
  ],
  "img": "icons/magic/air/air-burst-spiral-teal-green.webp",
  "folder": "qUHjLOJ6GhNjE4HD",
  "ownership": {
    "default": 0,
    "6yhz13iFYYklKtgA": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.3.1",
    "coreVersion": "12.331",
    "createdTime": 1721274673990,
    "modifiedTime": 1730039103863,
    "lastModifiedBy": "6yhz13iFYYklKtgA",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "_id": "AqdjSz2aChIpTlqL",
  "sort": 0,
  "_key": "!items!AqdjSz2aChIpTlqL"
}
